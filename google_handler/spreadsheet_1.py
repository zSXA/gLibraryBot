from gspread import Client, Spreadsheet, service_account, exceptions
from typing import List, Dict


config_auth = 'glibrarybot-014a8a5f400f.json'
table_key = '1qPdi8-dwzekVP1vxE_7mRMtacn_LgcxjZHI_nvV7NMw'
client=service_account(filename=config_auth)
table=client.open_by_key(table_key)


def client_init_json() -> Client:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets."""
    return service_account(filename='glibrarybot-014a8a5f400f.json')

def get_table_by_key(client: Client, table_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Google Sheets –ø–æ ID —Ç–∞–±–ª–∏—Ü—ã."""
    return client.open_by_key(table_key)

def create_worksheet(table: Spreadsheet, title: str, rows: int, cols: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    return table.add_worksheet(title, rows, cols)

def get_data_from_sheet(table: Spreadsheet, sheet_main: str) -> List[Dict]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.

    :param table: –û–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã Google Sheets (Spreadsheet).
    :param sheet_main: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    """
    worksheet = table.worksheet(sheet_main)
    headers = worksheet.row_values(7)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏

    data = []
    rows = worksheet.get_all_values()[7:]  # –ù–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏

    for row in rows:
       row_dict = {headers[i]: value for i, value in enumerate(row)}
       data.append(row_dict)
    return data

def update_data_to_sheet(table: Spreadsheet, title: str, data: List[Dict], start_row: int = 2) -> None:
    """
    –î–æ–±–æ–≤–ª—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º –ª–∏—Å—Ç–µ –≤ Google Sheets.

    :param table: –û–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã (Spreadsheet).
    :param title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞.
    :param data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏.
    :param start_row: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        worksheet = table.worksheet(title)
    except exceptions.WorksheetNotFound:
        worksheet = create_worksheet(table, title, rows=100, cols=20)

    headers = data[0].keys()
    end_row = start_row + len(data) - 1
    end_col = chr(ord('A') + len(headers) - 1)

    cell_range = f'A{start_row}:{end_col}{end_row}'
    cell_list = worksheet.range(cell_range)

    flat_data = []
    for row in data:
        for header in headers:
            flat_data.append(row[header])

    for i, cell in enumerate(cell_list):
        cell.value = flat_data[i]

    worksheet.update_cells(cell_list)

def update_cell_to_sheet(table: Spreadsheet, title: str,
                        col: int, row: int, user):

    worksheet = table.worksheet(title)
    worksheet.update_cell(col, row, user)

def init_table(sheet_main: str, table_key=table_key):
    client=client_init_json()
    table=get_table_by_key(client, table_key)
    return get_data_from_sheet(table, sheet_main)

def get_data(sheet_main: str):
    data = init_table(sheet_main)
    return data

def get_books_2(sheet_main, user: str):
    data = get_data(sheet_main)
    books = []
    for item in data:
        book = item['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏']
        if item['–ß–∏—Ç–∞—Ç–µ–ª—å'] != '':
            if item['–ß–∏—Ç–∞—Ç–µ–ª—å'] == user:
                book = 'üìñ' + book
            else:
                book = 'üìç' + book
        books.append(book)
    return books

def update_rent(user: str, book: str, sheet_main: str, row=-1):
    data = get_data()
    for item in data:
        if item['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏'] == book:
            row = data.index(item)
            break
    client=client_init_json()
    table=get_table_by_key(client, table_key)
    update_cell_to_sheet(table,sheet_main, 5, row+7,user)
    